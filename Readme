食用方法一：运行目录下的sql脚本，数据库密码改为abc888，在out/artifacts/to的目录下有war包，可以放入tomcat的webapp文件夹下，然后运行tomcat，浏览器打开localhost:8080/to即可访问项目
食用方法二：运行目录下的sql脚本，拉去到idea更改dao/impl/jdbc下的数据库密码再运行，访问localhost:8080
ps:由于在存储中文cookie时，使用了编码方法，因此最好使用jdk1.8运行+mysql8版本+tomcat8版本，目前知道jdk17运行会报错，

总结：本次的实验中，我们小组完成了一个电商购物的项目，对于我来说，完成了所有java,js,jsp动态层的代码。包括dao与servlet还有实体类，jdbc交互的部分语句编写方式，再次体验到了java层分类编写的好处，也深刻理解了web.xml的编写逻辑。在项目中抽取出jdbc连接的类，减少了大量DAO层的甬余代码。还使用了全局servlet，使得项目报错的时候，给予用户友好的反馈。
除此之外，我还编写了js层代码，使得服务端与客户端的交互访问得到数据。与另一位小组同伴一起编写了jsp，我主要负责其中的动态循环显示数据部分，也就是jsp中的java层。
然而在开始编写阶段，总是最困难的，无论是小组内不同工具的版本选择，兼容性，还有有时idea抽风问题。不仅如此，还有浏览器缓存导致已改的代码没有立马显示，不过总之，在小组的交流总结下，也算是成功完成了项目。令我印象最深的就是主页面加入购物车的功能，由于项目初期，实体类的设计并没有很深的理解，导致在加入购物车的时候，如果是同一个商品加入两次，也只会显示一次。因此我在dao层的goodsDao类重新调用另一个users_goods类得到原来的商品数量，然后分别对两个list遍历，由于int的默认值是0，因此只要把原先的数量存入要返回的list中即可完成。 除此之外，我们在为另一个组员部署项目的时候发现，一直报错编译不了jsp类，所以我们一直认为是tomcat问题，我们尝试过重新导入jar包，乃至导入全局jar包依然没有解决，之后我提出打包成war包的方式，在tomcat的webapp目录下部署，可以规避idea可能存在的缓存问题，但是依旧没有成功，到最后我们选择了我们一开始就排除的方案，就是更改jdk版本为一致版本，没想到最后竟然完美解决，之后带着好奇心我们翻阅资料得知在jdk18和jdk1.8中的springbuffer方法进行了改进，导致无法成功编译，最终才会导致显示jsp无法编译。通过老师的话，这也让我们明白有时候报的错也可以和实际错误有很大偏差，这不得不承认是非常别致与刁钻的问题。
最后，我为小组开放了内网穿透功能，使得小组其他成员在不用重新部署配置环境的情况下，可以访问网站，我认为，实训的目的不仅仅是将所学的知识进行呈现，更多的是让我们发挥动手能力，在实训中遇到各种各样奇奇怪怪的问题并解决，也是一种学习方式。总而言之，这次实训中我与小组所遇到的到最后都能解决，更没有遗憾，所以我认为这次实训对我知识的提升是必然的，还有很多遇见问题的解决能力有明显提升。

在项目完成之后，也让我回想起软考的设计原则，因此我将公用方法抽取，dao层重新编写了接口类，实现接口分离原则，使得代码更易维护、扩展和测试。还有实现依赖倒置原则，这种设计方式有助于减少模块之间的耦合，提高代码的灵活性和可维护性。